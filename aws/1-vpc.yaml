AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template adapts the AWS VPC Quickstart for the Web to Cloud Phase 1 project.
  It has the following differences from the QuickStart.  The Private A subnet has
  been renamed FrontEnd and the default IPs for 2 zones public and front-end reflect
  the non-production network layout.

  The VPN connection part is based on the web page:
  https://ypoonawala.wordpress.com/2014/11/26/setting-up-a-hardware-vpn-connection-to-your-aws-vpc-using-cloudformation-for-dummies/

  This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed
  NAT gateways in the public subnet for each Availability Zone. You can also
  create additional private subnets with dedicated custom network access control
  lists (ACLs). If you deploy the Quick Start in a region that doesn't support
  NAT gateways, NAT instances are deployed instead. **WARNING** This template
  creates AWS resources. You will be billed for the AWS resources used if you
  create a stack from this template. QS(0027)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Availability Zone Configuration
        Parameters:
          - AvailabilityZones
          - NumberOfAZs
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PublicSubnet4CIDR
          - CreateFrontEndSubnets
          - FrontEndSubnet1ACIDR
          - FrontEndSubnet2ACIDR
          - FrontEndSubnet3ACIDR
          - FrontEndSubnet4ACIDR
          - VPCTenancy
      - Label:
          default: VPN Configuration
        Parameters:
          - CreateVPNConnection
          - BGPAsn
          - CustomerGateway1IP
          - CustomerGateway2IP
          - CustomerGateway1Suffix
          - CustomerGateway2Suffix
      - Label:
          default: Amazon NAT Configuration
        Parameters:
          - UseNATGateway
          - KeyPairName
          - NATInstanceType
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      CreateAdditionalPrivateSubnets:
        default: Create additional private subnets with dedicated network ACLs
      CreatePrivateSubnets:
        default: Create private subnets
      KeyPairName:
        default: Key pair name
      NATInstanceType:
        default: NAT instance type
      NumberOfAZs:
        default: Number of Availability Zones
      FrontEndSubnet1ACIDR:
        default: FrontEnd subnet 1A CIDR
      FrontEndSubnet2ACIDR:
        default: FrontEnd subnet 2A CIDR
      FrontEndSubnet3ACIDR:
        default: FrontEnd subnet 3A CIDR
      FrontEndSubnet4ACIDR:
        default: FrontEnd subnet 4A CIDR
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnet3CIDR:
        default: Public subnet 3 CIDR
      PublicSubnet4CIDR:
        default: Public subnet 4 CIDR
      UseNATGateway:
        default: Use NAT gateway instead of NAT instance
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC Tenancy
      CreateVPNConnection:
        default: Create VPN connection automatically
      BGPAsn:
        default: BGP setting for the VPN connection
      CustomerGateway1IP:
        default: Internet IP address for Customer Gateway 1
      CustomerGateway2IP:
        default: Internet IP address for Customer Gateway 2
      CustomerGateway1Suffix:
        default: Location text suffix for Customer Gateway 1
      CustomerGateway2Suffix:
        default: Location text suffix for Customer Gateway 2
Parameters:
  AvailabilityZones:
    Description: >-
      List of Availability Zones to use for the subnets in the VPC. Note: The
      logical order is preserved.
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  CreateAdditionalPrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Set to true to create a network ACL protected subnet in each Availability
      Zone. If false, the CIDR parameters for those subnets will be ignored. If
      true, it also requires that the 'Create private subnets' parameter is also
      true to have any effect.
    Type: String
  CreateFrontEndSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: >-
      Set to false to create only public subnets. If false, the CIDR parameters
      for ALL FrontEnd subnets will be ignored.
    Type: String
  KeyPairName:
    Description: >-
      Public/private key pairs allow you to securely connect to your NAT
      instance after it launches. This is used only if the region does not
      support NAT gateways.
    Type: 'AWS::EC2::KeyPair::KeyName'
  CreateVPNConnection:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Set to true to create the VPN connection to an off-site location.  If 
      false then all VPN parameters will be ignored.
    Type: String
  CreateVPNConnection2:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Set to true to create the second VPN connection to an off-site location.  
      If false then we will ignore all parameters for the second customer gateway.
    Type: String
  BGPAsn:
    Description: >-
      Set to the BGP number that the VPN should use.  This is relevant only if
      CreateVPNConnection is set to true.  The Default value should be changed
      for any real usage.
    Type: String
    AllowedPattern: >-
      ^([0-9]+)$
    Default: 65111
  CustomerGateway1Suffix:
    Description: >-
      Set to the suffix used for the name of the first customer gateway.  This is
      ignored if CreateVPNConnection is false.
    Default: "cumm111"
    Type: String
  CustomerGateway1IP:
    Description: >-
      Set to the internet facing IP address of the customer gateway.  This is
      ignored if CreateVPNConnection is false.
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    ConstraintDescription: IP address parameter must be in the form x.x.x.x
    Default: 128.197.254.38
    Type: String
  CustomerGateway2Suffix:
    Description: >-
      Set to the suffix used for the name of the second customer gateway.  This is
      ignored if CreateVPNConnection2 is false.
    Default: "comm595"
    Type: String
  CustomerGateway2IP:
    Description: >-
      Set to the internet facing IP address of the second customer gateway.  
      This is ignored if CreateVPNConnection2 is false.
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    ConstraintDescription: IP address parameter must be in the form x.x.x.x
    Default: 128.197.254.39
    Type: String
  UseNATGateway:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: >-
      Set to false to use NAT instances instead of NAT gateways.  If true then CloudFormation will create NAT gateways.
    Type: String
  NATInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m4.large
    Default: t2.small
    Description: >-
      Amazon EC2 instance type for the NAT instances. This is used only if the
      region does not support NAT gateways.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
      - '4'
    Default: '2'
    Description: >-
      Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  FrontEndSubnet1ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.57.254.0/24
    Description: CIDR block for FrontEnd subnet 1A located in Availability Zone 1
    Type: String
  FrontEndSubnet2ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.57.255.0/24
    Description: CIDR block for FrontEnd subnet 2A located in Availability Zone 2
    Type: String
  FrontEndSubnet3ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: CIDR block for FrontEnd subnet 3A located in Availability Zone 3
    Type: String
  FrontEndSubnet4ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.96.0/19
    Description: CIDR block for FrontEnd subnet 4A located in Availability Zone 4
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.57.252.0/24
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.57.253.0/24
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3
    Type: String
  PublicSubnet4CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.176.0/20
    Description: CIDR block for the public DMZ subnet 4 located in Availability Zone 4
    Type: String
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.57.252.0/22
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
Mappings:
  AWSAMIRegionMap:
    AMI:
      AWSNATHVM: amazon/amzn-ami-vpc-nat-hvm-2017.09.1.20171120-x86_64-ebs
    us-east-1:
      AWSNATHVM: ami-25ef665f
    us-gov-west-1:
      AWSNATHVM: ami-3f0a8f5e
Conditions:
  3AZCondition: !Or 
    - !Equals 
      - !Ref NumberOfAZs
      - '3'
    - !Condition 4AZCondition
  4AZCondition: !Equals 
    - !Ref NumberOfAZs
    - '4'
  GovCloudCondition: !Equals 
    - !Ref 'AWS::Region'
    - us-gov-west-1
  IsCreateVPNSet: !Equals
    - !Ref CreateVPNConnection
    - 'true'
  IsCreateVPN2Set: !Equals
    - !Ref CreateVPNConnection2
    - 'true'
  IsNATGatewaySet: !Equals
    - !Ref UseNATGateway
    - 'true'
  NATInstanceCondition: !And 
    - !Condition FrontEndSubnetsCondition
    - !Not
      - !Condition IsNATGatewaySet
  NATGatewayCondition: !And 
    - !Condition FrontEndSubnetsCondition
    - !Condition IsNATGatewaySet
  NATInstance&3AZCondition: !And 
    - !Condition NATInstanceCondition
    - !Condition 3AZCondition
  NATInstance&4AZCondition: !And 
    - !Condition NATInstanceCondition
    - !Condition 4AZCondition
  NATGateway&3AZCondition: !And 
    - !Condition NATGatewayCondition
    - !Condition 3AZCondition
  NATGateway&4AZCondition: !And 
    - !Condition NATGatewayCondition
    - !Condition 4AZCondition
  NVirginiaRegionCondition: !Equals 
    - !Ref 'AWS::Region'
    - us-east-1
  FrontEndSubnetsCondition: !Equals 
    - !Ref CreateFrontEndSubnets
    - 'true'
  FrontEndSubnets&3AZCondition: !And 
    - !Condition FrontEndSubnetsCondition
    - !Condition 3AZCondition
  FrontEndSubnets&4AZCondition: !And 
    - !Condition FrontEndSubnetsCondition
    - !Condition 4AZCondition
  S3VPCEndpointCondition: !And 
    - !Condition FrontEndSubnetsCondition
    - !Not 
      - !Or 
        - !Equals 
          - !Ref 'AWS::Region'
          - us-gov-west-1
        - !Equals 
          - !Ref 'AWS::Region'
          - cn-north-1
Resources:
  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !If 
        - NVirginiaRegionCondition
        - ec2.internal
        - !Join 
          - ''
          - - !Ref 'AWS::Region'
            - .compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-dhcp"
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: !Ref VPCTenancy
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
  VPCDHCPOptionsAssociation:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
        - Key: Network
          Value: Public
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  FrontEndSubnet1A:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FrontEndSubnet1ACIDR
      AvailabilityZone: !Select 
        - '0'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-subnet-1"
        - Key: Network
          Value: Private
  FrontEndSubnet2A:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FrontEndSubnet2ACIDR
      AvailabilityZone: !Select 
        - '1'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-subnet-2"
        - Key: Network
          Value: Private
  FrontEndSubnet3A:
    Condition: FrontEndSubnets&3AZCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FrontEndSubnet3ACIDR
      AvailabilityZone: !Select 
        - '2'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-subnet-3"
        - Key: Network
          Value: Private
  FrontEndSubnet4A:
    Condition: FrontEndSubnets&4AZCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FrontEndSubnet4ACIDR
      AvailabilityZone: !Select 
        - '3'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-subnet-4"
        - Key: Network
          Value: Private
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select 
        - '0'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-1"
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select 
        - '1'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-2"
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  PublicSubnet3:
    Condition: 3AZCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select 
        - '2'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-3"
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  PublicSubnet4:
    Condition: 4AZCondition
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet4CIDR
      AvailabilityZone: !Select 
        - '3'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-4"
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  FrontEndSubnet1ARouteTable:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-route-1"
        - Key: Network
          Value: Private
  FrontEndSubnet1ARoute:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref FrontEndSubnet1ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance1
        - !Ref 'AWS::NoValue'
      NatGatewayId: !If 
        - NATGatewayCondition
        - !Ref NATGateway1
        - !Ref 'AWS::NoValue'
  FrontEndSubnet1ARouteTableAssociation:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FrontEndSubnet1A
      RouteTableId: !Ref FrontEndSubnet1ARouteTable
  FrontEndSubnet2ARouteTable:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-route-2"
        - Key: Network
          Value: Private
  FrontEndSubnet2ARoute:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref FrontEndSubnet2ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance2
        - !Ref 'AWS::NoValue'
      NatGatewayId: !If 
        - NATGatewayCondition
        - !Ref NATGateway2
        - !Ref 'AWS::NoValue'
  FrontEndSubnet2ARouteTableAssociation:
    Condition: FrontEndSubnetsCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FrontEndSubnet2A
      RouteTableId: !Ref FrontEndSubnet2ARouteTable
  FrontEndSubnet3ARouteTable:
    Condition: FrontEndSubnets&3AZCondition
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-route-3"
        - Key: Network
          Value: Private
  FrontEndSubnet3ARoute:
    Condition: FrontEndSubnets&3AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref FrontEndSubnet3ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance3
        - !Ref 'AWS::NoValue'
      NatGatewayId: !If 
        - NATGatewayCondition
        - !Ref NATGateway3
        - !Ref 'AWS::NoValue'
  FrontEndSubnet3ARouteTableAssociation:
    Condition: FrontEndSubnets&3AZCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FrontEndSubnet3A
      RouteTableId: !Ref FrontEndSubnet3ARouteTable
  FrontEndSubnet4ARouteTable:
    Condition: FrontEndSubnets&4AZCondition
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-route-4"
        - Key: Network
          Value: Private
  FrontEndSubnet4ARoute:
    Condition: FrontEndSubnets&4AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref FrontEndSubnet4ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance4
        - !Ref 'AWS::NoValue'
      NatGatewayId: !If 
        - NATGatewayCondition
        - !Ref NATGateway4
        - !Ref 'AWS::NoValue'
  FrontEndSubnet4ARouteTableAssociation:
    Condition: FrontEndSubnets&4AZCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FrontEndSubnet4A
      RouteTableId: !Ref FrontEndSubnet4ARouteTable
#  PrivateSubnet1BNetworkAcl:
#    Condition: AdditionalPrivateSubnetsCondition
#    Type: 'AWS::EC2::NetworkAcl'
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: NACL Protected subnet 1
#        - Key: Network
#          Value: NACL Protected
#  PrivateSubnet1BNetworkAclEntryInbound:
#    Condition: AdditionalPrivateSubnetsCondition
#    Type: 'AWS::EC2::NetworkAclEntry'
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: 'false'
#      NetworkAclId: !Ref PrivateSubnet1BNetworkAcl
#      Protocol: '-1'
#      RuleAction: allow
#      RuleNumber: '100'
#  PrivateSubnet1BNetworkAclEntryOutbound:
#    Condition: AdditionalPrivateSubnetsCondition
#    Type: 'AWS::EC2::NetworkAclEntry'
#    Properties:
#      CidrBlock: 0.0.0.0/0
#      Egress: 'true'
#      NetworkAclId: !Ref PrivateSubnet1BNetworkAcl
#      Protocol: '-1'
#      RuleAction: allow
#      RuleNumber: '100'
#  PrivateSubnet1BNetworkAclAssociation:
#    Condition: AdditionalPrivateSubnetsCondition
#    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
#    Properties:
#      SubnetId: !Ref PrivateSubnet1B
#      NetworkAclId: !Ref PrivateSubnet1BNetworkAcl
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-route"
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet4RouteTableAssociation:
    Condition: 4AZCondition
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicSubnetRouteTable
  NAT1EIP:
    Condition: FrontEndSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance1
        - !Ref 'AWS::NoValue'
  NAT2EIP:
    Condition: FrontEndSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance2
        - !Ref 'AWS::NoValue'
  NAT3EIP:
    Condition: FrontEndSubnets&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance3
        - !Ref 'AWS::NoValue'
  NAT4EIP:
    Condition: FrontEndSubnets&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      InstanceId: !If 
        - NATInstanceCondition
        - !Ref NATInstance4
        - !Ref 'AWS::NoValue'
  NATGateway1:
    Condition: NATGatewayCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natgw-1"
      AllocationId: !GetAtt 
        - NAT1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  NATGateway2:
    Condition: NATGatewayCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natgw-2"
      AllocationId: !GetAtt 
        - NAT2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
  NATGateway3:
    Condition: NATGateway&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natgw-3"
      AllocationId: !GetAtt 
        - NAT3EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet3
  NATGateway4:
    Condition: NATGateway&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natgw-4"
      AllocationId: !GetAtt 
        - NAT4EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet4
  NATInstance1:
    Condition: NATInstanceCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AWSNATHVM
      InstanceType: !Ref NATInstanceType
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natinst-1"
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      KeyName: !If 
        - NATInstanceCondition
        - !Ref KeyPairName
        - !Ref 'AWS::NoValue'
      SourceDestCheck: 'false'
  NATInstance2:
    Condition: NATInstanceCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AWSNATHVM
      InstanceType: !Ref NATInstanceType
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natinst-2"
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet2
      KeyName: !If 
        - NATInstanceCondition
        - !Ref KeyPairName
        - !Ref 'AWS::NoValue'
      SourceDestCheck: 'false'
  NATInstance3:
    Condition: NATInstance&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AWSNATHVM
      InstanceType: !Ref NATInstanceType
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natinst-3"
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet3
      KeyName: !If 
        - NATInstanceCondition
        - !Ref KeyPairName
        - !Ref 'AWS::NoValue'
      SourceDestCheck: 'false'
  NATInstance4:
    Condition: NATInstance&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AWSNATHVM
      InstanceType: !Ref NATInstanceType
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-natinst-4"
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet4
      KeyName: !If 
        - NATInstanceCondition
        - !Ref KeyPairName
        - !Ref 'AWS::NoValue'
      SourceDestCheck: 'false'
  NATInstanceSecurityGroup:
    Condition: NATInstanceCondition
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables outbound internet access for the VPC via the NAT instances
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat-sg"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '1'
          ToPort: '65535'
          CidrIp: !Ref VPCCIDR
  S3VPCEndpoint:
    Condition: S3VPCEndpointCondition
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref FrontEndSubnet1ARouteTable
        - !Ref FrontEndSubnet2ARouteTable
        - !If 
          - FrontEndSubnets&3AZCondition
          - !Ref FrontEndSubnet3ARouteTable
          - !Ref 'AWS::NoValue'
        - !If 
          - FrontEndSubnets&4AZCondition
          - !Ref FrontEndSubnet4ARouteTable
          - !Ref 'AWS::NoValue'
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC
  VpcCustomerGateway1:
    Condition: IsCreateVPNSet
    Type: 'AWS::EC2::CustomerGateway'
    Properties:
      BgpAsn: !Ref BGPAsn
      IpAddress: !Ref CustomerGateway1IP
      Type: 'ipsec.1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-cgw-${CustomerGateway1Suffix}"
  VpcCustomerGateway2:
    Condition: IsCreateVPN2Set
    Type: 'AWS::EC2::CustomerGateway'
    Properties:
      BgpAsn: !Ref BGPAsn
      IpAddress: !Ref CustomerGateway2IP
      Type: 'ipsec.1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-cgw-${CustomerGateway2Suffix}"
  VpcVpnGateway:
    Condition: IsCreateVPNSet
    Type: 'AWS::EC2::VPNGateway'
    Properties:
      Type: 'ipsec.1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vgw"
  VpcVpnConnection1:
    Condition: IsCreateVPNSet
    Type: 'AWS::EC2::VPNConnection'
    Properties:
      Type: 'ipsec.1'
      CustomerGatewayId: !Ref 'VpcCustomerGateway1'
      VpnGatewayId: !Ref 'VpcVpnGateway'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpn-${CustomerGateway1Suffix}"
  VpcVpnConnection2:
    Condition: IsCreateVPN2Set
    Type: 'AWS::EC2::VPNConnection'
    Properties:
      Type: 'ipsec.1'
      CustomerGatewayId: !Ref 'VpcCustomerGateway2'
      VpnGatewayId: !Ref 'VpcVpnGateway'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpn-${CustomerGateway2Suffix}"
  VPCVPNGatewayAttachment:
    Condition: IsCreateVPNSet
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref 'VPC'
      VpnGatewayId: !Ref 'VpcVpnGateway'
  VpcVpnGatewayRouteProp:
    Condition: IsCreateVPNSet
    DependsOn: VPCVPNGatewayAttachment
    Type: 'AWS::EC2::VPNGatewayRoutePropagation'
    Properties:
      VpnGatewayId: !Ref 'VpcVpnGateway'
      RouteTableIds:
        - !Ref FrontEndSubnet1ARouteTable
        - !Ref FrontEndSubnet2ARouteTable
        - !If 
          - FrontEndSubnets&3AZCondition
          - !Ref FrontEndSubnet3ARouteTable
          - !Ref 'AWS::NoValue'
        - !If 
          - FrontEndSubnets&4AZCondition
          - !Ref FrontEndSubnet4ARouteTable
          - !Ref 'AWS::NoValue'
Outputs:
  NAT1EIP:
    Condition: FrontEndSubnetsCondition
    Description: NAT 1 IP address
    Value: !Ref NAT1EIP
    Export:
      Name: !Sub '${AWS::StackName}-NAT1EIP'
  NAT2EIP:
    Condition: FrontEndSubnetsCondition
    Description: NAT 2 IP address
    Value: !Ref NAT2EIP
    Export:
      Name: !Sub '${AWS::StackName}-NAT2EIP'
  NAT3EIP:
    Condition: FrontEndSubnets&3AZCondition
    Description: NAT 3 IP address
    Value: !Ref NAT3EIP
    Export:
      Name: !Sub '${AWS::StackName}-NAT3EIP'
  NAT4EIP:
    Condition: FrontEndSubnets&4AZCondition
    Description: NAT 4 IP address
    Value: !Ref NAT4EIP
    Export:
      Name: !Sub '${AWS::StackName}-NAT4EIP'
  FrontEndSubnet1ACIDR:
    Condition: FrontEndSubnetsCondition
    Description: FrontEnd subnet 1A CIDR in Availability Zone 1
    Value: !Ref FrontEndSubnet1ACIDR
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet1ACIDR'
  FrontEndSubnet1AID:
    Condition: FrontEndSubnetsCondition
    Description: FrontEnd subnet 1A ID in Availability Zone 1
    Value: !Ref FrontEndSubnet1A
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet1AID'
  FrontEndSubnet2ACIDR:
    Condition: FrontEndSubnetsCondition
    Description: FrontEnd subnet 2A CIDR in Availability Zone 2
    Value: !Ref FrontEndSubnet2ACIDR
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet2ACIDR'
  FrontEndSubnet2AID:
    Condition: FrontEndSubnetsCondition
    Description: FrontEnd subnet 2A ID in Availability Zone 2
    Value: !Ref FrontEndSubnet2A
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet2AID'
  FrontEndSubnet3ACIDR:
    Condition: FrontEndSubnets&3AZCondition
    Description: FrontEnd subnet 3A CIDR in Availability Zone 3
    Value: !Ref FrontEndSubnet3ACIDR
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet3ACIDR'
  FrontEndSubnet3AID:
    Condition: FrontEndSubnets&3AZCondition
    Description: FrontEnd subnet 3A ID in Availability Zone 3
    Value: !Ref FrontEndSubnet3A
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet3AID'
  FrontEndSubnet4ACIDR:
    Condition: FrontEndSubnets&4AZCondition
    Description: FrontEnd subnet 4A CIDR in Availability Zone 4
    Value: !Ref FrontEndSubnet4ACIDR
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet4ACIDR'
  FrontEndSubnet4AID:
    Condition: FrontEndSubnets&4AZCondition
    Description: FrontEnd subnet 4A ID in Availability Zone 4
    Value: !Ref FrontEndSubnet4A
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet4AID'
  PublicSubnet1CIDR:
    Description: Public subnet 1 CIDR in Availability Zone 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1CIDR'
  PublicSubnet1ID:
    Description: Public subnet 1 ID in Availability Zone 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1ID'
  PublicSubnet2CIDR:
    Description: Public subnet 2 CIDR in Availability Zone 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2CIDR'
  PublicSubnet2ID:
    Description: Public subnet 2 ID in Availability Zone 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2ID'
  PublicSubnet3CIDR:
    Condition: 3AZCondition
    Description: Public subnet 3 CIDR in Availability Zone 3
    Value: !Ref PublicSubnet3CIDR
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3CIDR'
  PublicSubnet3ID:
    Condition: 3AZCondition
    Description: Public subnet 3 ID in Availability Zone 3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3ID'
  PublicSubnet4CIDR:
    Condition: 4AZCondition
    Description: Public subnet 4 CIDR in Availability Zone 4
    Value: !Ref PublicSubnet4CIDR
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4CIDR'
  PublicSubnet4ID:
    Condition: 4AZCondition
    Description: Public subnet 4 ID in Availability Zone 4
    Value: !Ref PublicSubnet4
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4ID'
  S3VPCEndpoint:
    Condition: S3VPCEndpointCondition
    Description: S3 VPC Endpoint
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-S3VPCEndpoint'
  FrontEndSubnet1ARouteTable:
    Condition: FrontEndSubnetsCondition
    Value: !Ref FrontEndSubnet1ARouteTable
    Description: FrontEnd subnet 1A route table
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet1ARouteTable'
  FrontEndSubnet2ARouteTable:
    Condition: FrontEndSubnetsCondition
    Value: !Ref FrontEndSubnet2ARouteTable
    Description: FrontEnd subnet 2A route table
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet2ARouteTable'
  FrontEndSubnet3ARouteTable:
    Condition: FrontEndSubnets&3AZCondition
    Value: !Ref FrontEndSubnet3ARouteTable
    Description: FrontEnd subnet 3A route table
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet3ARouteTable'
  FrontEndSubnet4ARouteTable:
    Condition: FrontEndSubnets&4AZCondition
    Value: !Ref FrontEndSubnet4ARouteTable
    Description: FrontEnd subnet 4A route table
    Export:
      Name: !Sub '${AWS::StackName}-FrontEndSubnet4ARouteTable'
  PublicSubnetRouteTable:
    Value: !Ref PublicSubnetRouteTable
    Description: Public subnet route table
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetRouteTable'
  VPCCIDR:
    Value: !Ref VPCCIDR
    Description: VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'
  VPCID:
    Value: !Ref VPC
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
