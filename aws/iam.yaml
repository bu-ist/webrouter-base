AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Prefix:
    Type: String
    Default: "web2cloud-test"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref 'VpcId'
  ALBSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  ALBSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
  ECSSecurityGroupSSHinboundVPN1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 168.122.88.0/24
  ECSSecurityGroupSSHinboundVPN2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 168.122.75.0/24
  ECSSecurityGroupSSHinboundRelay7:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 128.197.229.78/32
  ECSSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'ALBSecurityGroup'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
# #########
# Now we do the roles for the development pipeline
#
# #########
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: 
                  "Fn::ImportValue": !Sub "${Prefix}-artifact-bucket-resource"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: 
                  "Fn::ImportValue": !Sub "${Prefix}-container-repository-arn"
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - "Fn::ImportValue": !Sub "${Prefix}-artifact-bucket-resource"
                  - "Fn::ImportValue": !Sub "${Prefix}-template-bucket-arn"
                  - "Fn::ImportValue": !Sub "${Prefix}-template-bucket-resource"
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole


Outputs:
  ALBSecurityGroup:
    Description: "Security Group for load balancers"
    Value: !Ref 'ALBSecurityGroup'
    Export: 
      Name: !Sub "${AWS::StackName}-loadbalancer-sg"
  ECSSecurityGroup:
    Description: "Security Group for EC2 systems that are part of ECS clusters"
    Value: !Ref 'ECSSecurityGroup'
    Export: 
      Name: !Sub "${AWS::StackName}-containers-sg"
  AutoscalingRole:
    Description: "IAM Role for autoscaling containers"
    Value: !Ref 'AutoscalingRole'
    Export: 
      Name: !Sub "${AWS::StackName}-autoscaling-role"
  AutoscalingRoleARN:
    Description: "ARN for IAM Role for autoscaling containers"
    Value: !GetAtt [ 'AutoscalingRole', 'Arn' ]
    Export: 
      Name: !Sub "${AWS::StackName}-autoscaling-role-arn"
  ECSServiceRole:
    Description: "IAM Role for Container management/instance"
    Value: !Ref 'ECSServiceRole'
    Export: 
      Name: !Sub "${AWS::StackName}-container-role"
  ECSServiceRoleARN:
    Description: "ARN for IAM Role for Container management/instance"
    Value: !GetAtt [ 'ECSServiceRole', 'Arn' ]
    Export: 
      Name: !Sub "${AWS::StackName}-container-role-arn"
  ECSInstanceProfile:
    Description: "IAM Instance Profile with permissions for EC2 systems created as part of ECS cluster"
    Value: !Ref 'EC2InstanceProfile'
    Export: 
      Name: !Sub "${AWS::StackName}-instance-profile"
  CloudFormationExecutionRole:
    Value: !Ref 'CloudFormationExecutionRole'
    Export: 
      Name: !Sub "${AWS::StackName}-cloudformation-execution-role"
  CloudFormationExecutionRoleARN:
    Value: !GetAtt CloudFormationExecutionRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-cloudformation-execution-role-arn"
  CodeBuildServiceRole:
    Value: !Ref 'CodeBuildServiceRole'
    Export: 
      Name: !Sub "${AWS::StackName}-codebuild-service-role"
  CodeBuildServiceRoleARN:
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-codebuild-service-role-arn"
  CodePipelineServiceRole:
    Value: !Ref 'CodePipelineServiceRole'
    Export: 
      Name: !Sub "${AWS::StackName}-codepipeline-service-role"
  CodePipelineServiceRoleARN:
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-codepipeline-service-role-arn"
