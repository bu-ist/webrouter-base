rewrite_log on;

# ####
# These paths are specified as locations because they don't need to be dynamic.  Use standard NGINX
# whenever possible.
#

location = /robots.txt {
  set $toplevel "robots.txt" ;

  set $backend $host_backend ;
  set $key $hostkey;

  if ($top_backend) {
    set $backend $top_backend ;
  }

  #
  # End results of above is a backend variable - next we determine
  # what to do
  #
  if ($backend = 'redirect_asis') {
    add_header X-Upstream "redirect_asis" always;
    return 302 $redirect_url ;
  }
  if ($backend = 'redirect') {
    add_header X-Upstream "redirect" always;
    return 302 "$redirect_url$request_uri" ;
  }

  add_header X-Backend $backend always ;
  add_header X-Upstream $backend always ;

  # optionally override the default /robots.txt
  set $rest $request_uri ;
<% if ENV['ROBOTS_TXT'] %>
  if ($hostkey = '_') {
    set $rest <%= ENV['ROBOTS_TXT'] %> ;
  }
<% end %>
  proxy_pass $backend_scheme://$backend_hostname$rest ;

  # ####
  # The following headers have been moved here so we can do a map lookup to determine what host header
  # to use for the proxy request to the backend.  Because NGINX wants all the proxy_set_headers to be in
  # the same context we need to move all of them here.
  #
  proxy_set_header X-BU-Main-Uniqueid $http_x_amz_cf_id ;
  proxy_set_header X-BU-Frontend AWS-Cluster ;
  proxy_set_header X-Forwarded-Proto "$scheme" ;
  proxy_set_header X-Method "$scheme" ;
  proxy_set_header X-SSL $backend_xssl ;
  # source IP address
  proxy_set_header X-Forwarded-For $remote_addr ;
  proxy_set_header X-Real-IP $remote_addr ;
  # This is necessary for API gateway backends since API gateway keys off the API gateway domain name
  proxy_set_header X-Forwarded-Host $host ;
  proxy_set_header Host $backend_hostheader ;

  if ($backend_cachecontrol) {
    add_header Cache-Control $backend_cachecontrol always ;

    # NGINX weirdness: we need to readd the other headers as matching this prevents the others
    add_header X-Backend $backend always ;
    add_header X-Upstream $backend always ;
  }

  #
  resolver <%= ENV['NAMESERVER'] %> ;
}

# Case 1: root path
location = / {
  # The following conditional logic supports the bare homepage going to the network/host default
  # backend (presumably WordPress) if the root uri has a query string.  Otherwise it goes to the
  # backend specified by index.html.
  #
  # This is necessary for the One Editorial homepage edit/preview process.  Preview links for
  # unpublished posts (without permalinks) go to the root site domain with just a query parameter
  # like www.bu.edu/?page_id=1234&preview=true, so these need to be routed to WordPress.
  #
  if ($query_string !~ "preview=true" ) {
    set $toplevel "index.html" ;
  }

  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  #
  # End results of above is a backend variable - next we determine
  # what to do
  #
  if ($backend = 'redirect_asis') {
    add_header X-Upstream "redirect_asis" always;
    return 302 $redirect_url ;
  }
  if ($backend = 'redirect') {
    add_header X-Upstream "redirect" always;
    return 302 "$redirect_url$request_uri" ;
  }

  add_header X-Backend $backend always ;
  add_header X-Upstream $backend always ;

  proxy_pass $backend_scheme://$backend_hostname$request_uri ;

  # ####
  # The following headers have been moved here so we can do a map lookup to determine what host header
  # to use for the proxy request to the backend.  Because NGINX wants all the proxy_set_headers to be in
  # the same context we need to move all of them here.
  #
  proxy_set_header X-BU-Main-Uniqueid $http_x_amz_cf_id ;
  proxy_set_header X-BU-Frontend AWS-Cluster ;
  proxy_set_header X-Forwarded-Proto "$scheme" ;
  proxy_set_header X-Method "$scheme" ;
  proxy_set_header X-SSL $backend_xssl ;
  # source IP address
  proxy_set_header X-Forwarded-For $remote_addr ;
  proxy_set_header X-Real-IP $remote_addr ;
  # This is necessary for API gateway backends since API gateway keys off the API gateway domain name
  proxy_set_header X-Forwarded-Host $host ;
  proxy_set_header Host $backend_hostheader ;

  if ($backend_cachecontrol) {
    add_header Cache-Control $backend_cachecontrol always ;

    # NGINX weirdness: we need to readd the other headers as matching this prevents the others
    add_header X-Backend $backend always ;
    add_header X-Upstream $backend always ;
  }

  #
  resolver <%= ENV['NAMESERVER'] %> ;
}

location ~^/server/(?P<toplevel>version)$ {
  add_header X-Upstream "version" always;
  add_header Content-Type text/plain always;
  add_header Cache-Control "no-cache, no-store" always ;

  return 200 "hostname: $hostname\nsites: $top_backend\nbase: <%= ENV['BUILDDATE'] %>";
}

location ~^/server/backend/(?P<backend>[a-z0-9\-_]+)(?P<backend_uri>/.*)$ {
  add_header Cache-Control "no-cache, no-store" always ;
  add_header X-Uri "$backend_uri" always ;
  add_header X-Backend $backend always;
  add_header X-Upstream $backend always;

  proxy_pass $backend_scheme://$backend_hostname$backend_uri?$query_string ;

  # ####
  # The following headers have been moved here so we can do a map lookup to determine what host header
  # to use for the proxy request to the backend.  Because NGINX wants all the proxy_set_headers to be in
  # the same context we need to move all of them here.
  #
  proxy_set_header X-BU-Main-Uniqueid $http_x_amz_cf_id ;
  proxy_set_header X-BU-Frontend AWS-Cluster ;
  proxy_set_header X-Forwarded-Proto "$scheme" ;
  proxy_set_header X-Method "$scheme" ;
  proxy_set_header X-SSL $backend_xssl ;
  # source IP address
  proxy_set_header X-Forwarded-For $remote_addr ;
  proxy_set_header X-Real-IP $remote_addr ;
  # This is necessary for API gateway backends since API gateway keys off the API gateway domain name
  proxy_set_header X-Forwarded-Host $host ;
  proxy_set_header Host $backend_hostheader ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/config/default.d/(?P<config>[a-z0-9\-_\.]+)$ {
  add_header Cache-Control "no-cache, no-store" always ;
  add_header X-Uri "$config" always ;

  alias "/etc/nginx/default.d/$config" ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/config/conf.d/(?P<config>[a-z0-9\-_\.]+)$ {
  add_header Cache-Control "no-cache, no-store" always ;
  add_header X-Uri "$config" always ;

  alias "/etc/nginx/conf.d/$config" ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/maps/(?P<map>[a-zA-Z0-9_\.]+) {
  add_header Content-Type text/plain always;
  add_header Cache-Control "no-cache, no-store" always ;
  alias "/etc/nginx/maps/$map" ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/hosts.map$ {
  add_header Content-Type text/plain always;
  add_header Cache-Control "no-cache, no-store" always ;
  alias /etc/nginx/hosts.map ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/status$ {
  stub_status on;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/source_ip$ {
  add_header X-Upstream "source_ip" always;
  add_header Content-Type text/plain always;
  add_header Cache-Control "no-cache, no-store" always ;
  return 200 "remote_addr: $remote_addr\nreal-ip: $realip_remote_addr\nx-forwarded-for: $http_x_forwarded_for\n" ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

location ~^/server/cloudfront_ips$ {
  add_header X-Upstream "cloudfront_ips" always ;
  add_header Content-Type text/plain always;
  add_header Cache-Control "no-cache, no-store" always ;
  alias /etc/nginx/cloudfront_ips.conf ;

  # only from some BU networks
  allow 128.197.0.0/16 ;
  allow 168.122.0.0/16 ;
<% if ENV['ALLOW_DOCKER_NETS'] %>
  # allow the private net used by docker compose
  allow 172.0.0.0/8 ;
  allow 192.168.0.0/16 ;
<% end %>

  deny all ;
}

# ####
# the following test the routing lookup
#
location ~^/server/lookup/+(?P<microsite>(?P<toplevel>[a-zA-Z0-9_\.\-]+)(?P<second>/[a-zA-Z0-9_\.\-]+)) {

  # The first set of variables are determining if there is a
  # match on top or micro - output should be type
  #
  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  if ($micro_backend) {
    set $backend $micro_backend ;
    set $key "$hostkey/$microsite" ;
  }

  add_header Content-Type text/plain always;
  add_header X-Upstream "source_ip" always;
  add_header Cache-Control "no-cache, no-store" always ;
  return 200 "backend: $backend\ncachecontrol: $backend_cachecontrol\nredirect: $redirect_url\nscheme: $scheme\n\nhost: $host\nhostkey: $hostkey\nhost_backend: $host_backend\n\n\ntoplevel: $toplevel\ntop_backend: $top_backend\nmicro_site: $microsite\nmicro_backend: $micro_backend";
}

location  ~^/+server/lookup/+$ {
  # The first set of variables are determining if there is a
  # match on top or micro - output should be type
  #
  if ($query_string = '') {
    set $toplevel "index.html" ;
  }

  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  add_header Content-Type text/plain always;
  add_header X-Upstream "source_ip" always;
  add_header Cache-Control "no-cache, no-store" always ;
  return 200 "backend: $backend\ncachecontrol: $backend_cachecontrol\nredirect: $redirect_url\nscheme: $scheme\n\nhost: $host\nhostkey: $hostkey\nhost_backend: $host_backend\n\n\ntoplevel: $toplevel\ntop_backend: $top_backend\nmicro_site: $microsite\nmicro_backend: $micro_backend";
}

location  ~^/+server/lookup/+(?P<toplevel>[a-zA-Z0-9_\.\-]+) {
  # The first set of variables are determining if there is a
  # match on top or micro - output should be type
  #
  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  add_header Content-Type text/plain always;
  add_header X-Upstream "source_ip" always;
  add_header Cache-Control "no-cache, no-store" always ;
  return 200 "backend: $backend\ncachecontrol: $backend_cachecontrol\nredirect: $redirect_url\nscheme: $scheme\n\nhost: $host\nhostkey: $hostkey\nhost_backend: $host_backend\n\n\ntoplevel: $toplevel\ntop_backend: $top_backend\nmicro_site: $microsite\nmicro_backend: $micro_backend";
}

# ####
# We don't want to log the healthcheck traffic
#
location = /server/healthcheck {
  add_header X-Upstream "healthcheck" always ;
  add_header Content-Type text/plain always;
  access_log off;
  return 200 "OK\n";
}


# Special handling for S3 redirects for custom domains. We're serving
# this traffic out of a custom prefix in S3, but whenever a trailing
# slash is missing S3 will give a redirect into
# example.bu.edu/_domains/example.bu.edu/foo/ and we just need to
# redirect back to example.bu.edu/foo/
location ~^/+_domains/(?P<domain>[a-zA-Z0-9_\.\-]+)(?P<custompath>/.*) {
  return 303 "https://$domain$custompath" ;
}


# ####
# The following two rules are for doing the default action of looking in the map file (sites.map)
# for the type of backend.  The default is WordPress if that fails.
#
# case 3: 2 levels deep
location ~^/+(?P<microsite>(?P<toplevel>[a-zA-Z0-9_\.\-]+)(?P<second>/[a-zA-Z0-9_\.\-]+)) {

  # The first set of variables are determining if there is a
  # match on top or micro - output should be type
  #
  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  if ($micro_backend) {
    set $backend $micro_backend ;
    set $key "$hostkey/$microsite" ;
  }

  add_header X-Lookup "input: (${toplevel}:${microsite}) backend=${backend}(${top_backend}:${micro_backend})" always ;
  # Special case of WordPress we need to figure out if wpapp or wpassets
  #
  set $is_wpfile "${backend}:$request_uri" ;
  if ($is_wpfile ~ ^wordpress:/+([a-zA-Z0-9_\-]+/)?files/ ) {
    set $backend "wpassets" ;
  }

  #
  # End results of above is a backend variable - next we determine
  # what to do
  if ($backend = 'redirect_asis') {
    add_header X-Upstream "redirect_asis" always;
    return 302 $redirect_url ;
  }
  if ($backend = 'redirect') {
    add_header X-Upstream "redirect" always;
    return 302 "$redirect_url$request_uri" ;
  }

  add_header X-Backend $backend always ;
  add_header X-Upstream $backend always ;

  proxy_pass $backend_scheme://$backend_hostname$request_uri ;

  # ####
  # The following headers have been moved here so we can do a map lookup to determine what host header
  # to use for the proxy request to the backend.  Because NGINX wants all the proxy_set_headers to be in
  # the same context we need to move all of them here.
  #
  proxy_set_header X-BU-Main-Uniqueid $http_x_amz_cf_id ;
  proxy_set_header X-BU-Frontend AWS-Cluster ;
  proxy_set_header X-Forwarded-Proto "$scheme" ;
  proxy_set_header X-Method "$scheme" ;
  proxy_set_header X-SSL $backend_xssl ;
  # source IP address
  proxy_set_header X-Forwarded-For $remote_addr ;
  proxy_set_header X-Real-IP $remote_addr ;
  # This is necessary for API gateway backends since API gateway keys off the API gateway domain name
  proxy_set_header X-Forwarded-Host $host ;
  proxy_set_header Host $backend_hostheader ;

  if ($backend_cachecontrol) {
    add_header Cache-Control $backend_cachecontrol always ;

    # NGINX weirdness: we need to readd the other headers as matching this prevents the others
    add_header X-Backend $backend always ;
    add_header X-Upstream $backend always ;
  }

  #
  resolver <%= ENV['NAMESERVER'] %> ;
}

# case 2: single level deep
location  ~^/+(?P<toplevel>[a-zA-Z0-9_\.\-]+) {

  # The first set of variables are determining if there is a
  # match on top or micro - output should be type
  #
  set $backend $host_backend ;
  set $key $hostkey ;

  if ($top_backend) {
    set $backend $top_backend ;
    set $key "$hostkey/$toplevel" ;
  }

  add_header X-Lookup "input: (${toplevel}:) backend=${backend}(${top_backend}:)" always ;

  # Special case of WordPress we need to figure out if wpapp or wpassets
  #
  set $is_wpfile "${backend}:$request_uri" ;
  if ($is_wpfile ~ ^wordpress:/+([a-zA-Z0-9_\-]+/)?files/ ) {
    set $backend "wpassets" ;
  }

  add_header X-WPfile "${backend}    ${is_wpfile}" always ;

  #
  # End results of above is a backend variable - next we determine
  # what to do
  #
  if ($backend = 'redirect_asis') {
    add_header X-Upstream "redirect_asis" always;
    return 302 $redirect_url ;
  }
  if ($backend = 'redirect') {
    add_header X-Upstream "redirect" always;
    return 302 "$redirect_url$request_uri" ;
  }

  add_header X-Backend $backend always ;
  add_header X-Upstream $backend always ;

  proxy_pass $backend_scheme://$backend_hostname$request_uri ;

  # ####
  # The following headers have been moved here so we can do a map lookup to determine what host header
  # to use for the proxy request to the backend.  Because NGINX wants all the proxy_set_headers to be in
  # the same context we need to move all of them here.
  #
  proxy_set_header X-BU-Main-Uniqueid $http_x_amz_cf_id ;
  proxy_set_header X-BU-Frontend AWS-Cluster ;
  proxy_set_header X-Forwarded-Proto "$scheme" ;
  proxy_set_header X-Method "$scheme" ;
  proxy_set_header X-SSL $backend_xssl ;
  # source IP address
  proxy_set_header X-Forwarded-For $remote_addr ;
  proxy_set_header X-Real-IP $remote_addr ;
  # This is necessary for API gateway backends since API gateway keys off the API gateway domain name
  proxy_set_header X-Forwarded-Host $host ;
  proxy_set_header Host $backend_hostheader ;

  if ($backend_cachecontrol) {
    add_header Cache-Control $backend_cachecontrol always ;

    # NGINX weirdness: we need to readd the other headers as matching this prevents the others
    add_header X-Backend $backend always ;
    add_header X-Upstream $backend always ;
  }

  #
  resolver <%= ENV['NAMESERVER'] %> ;

}
